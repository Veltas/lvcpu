This file contains information about the architecture of the CPU I virtualize.

The CPU has two main registers: A and C, both 16-bit.
AL, AH, CL and CH refer to low and high bytes of the registers.
There is a flags register F, 8-bit, some bits have special meanings.
There is a stack pointer register SP, 16-bit.
There is a stack base pointer register BP, 16-bit.

All the above registers have shadow registers, which can be swapped with in an
instruction. Interrupt code typically uses shadow registers to maintain a copy
of state, so without disabling interrupts their state is volatile. Shadow
registers are referred to with a tick, e.g. A', although shadow registers do
not appear in assembly code.

There is an instruction pointer IP, 16-bit.
There is an instruction counter IC, 8-bit.
There is an interrupt register T, 8-bit.

Not listed, the CPU remembers if interrupts are currently enabled or disabled,
if the counter interrupt is enabled or disabled, if the instruction step
interrupt is enabled or disabled, if an interrupt is currently being handled.

All registers are zero on boot.

Every time IC increments and becomes 0, the counter zero interrupt is triggered
if enabled.

Every instruction processed outside of handling interrupts will trigger the
step interrupt if enabled (unless a counter interrupt is happening).

Interrupt codes are 7-bit. The interrupt handlers occupy 16 bytes each. The
address called for an interrupt code is 16*CODE+2048*T. Note that only the low
5 bits of T are relevant.

If an error interrupt is thrown while an interrupt is being handled, a double
fault is thrown instead.

Interrupts:
0x00 Invalid instruction error
0x01 Instruction counter zero
0x02 Memory error
0x03 Double fault error
0x04 Step
0x05-0x0F reserved
0x10-0x3F hardware reserved
0x40-0x7F software defined

On interrupt:
  If in interrupt mode
    Set A' to return address
    If CODE is error and handling an error already
      Jump to 16*3+2048*T
    else
      Jump to 16*CODE+2048*T
  DONE

Hardware interrupts are implicitly disabled while handling interrupts.
(informative) Software interrupts will clobber saved registers in shadow set
if triggered during an active interrupt, so should not be performed without
special register saving mechanisms.

On a third interrupt handled without corresponding RETIs, the effect is like
using a STOP instruction.

Instructions listing:

g8 refers to AL, AH, CL, CH.
AL 0
AH 1
CL 2
CH 3

g16 refers to A, C
r16 refers to A, C, SP, BP
A 0
C 1
SP 2
BP 3

u3 refers to an unsigned 3-bit literal 0, 1, 2, 3, 4, 5, 6, 7
i?, u? similar
n8, n16 refer to 8-bit and 16-bit literals (sign unimportant)

NOP
============
No effect
00

ADD g8, n8
ADD g8, g8
ADD r16, n16
ADD r16, r16
============
Sets p1 to p1 + p2, sets F (zero flag, carry flag)
Egnn
01gg
Frnnnn
02rr

SUB g8, g8
SUB r16, r16
============
Sets p1 to p1 - p2, sets F (zero flag)
03gg
04rr

INC C
=====
Sets C to C+1
05

DEC C
=====
Sets C to C-1
06

NEG g8
NEG g16
=======
Sets p1 to -p1
070g
071g

AND g8, g8
==========
Sets p1 to p1 & p2
08gg

OR g8, g8
=========
Sets p1 to p1 | p2
09gg

XOR g8, g8
==========
Sets p1 to p1 ^ p2
0Agg

ROT g8, u3
==========
Sets p1 to rotation by p2
0Bgu

SFT g8, i4
==========
Sets p1 to p1 << p2
0Cgi

MUL g8, g8
MUL A, g8
===========
Sets A to p1*p2 treating as unsigned integers, sets F (carry bit)
0Dgg
0D4g

MOV g8, g8
20gg
MOV r16, r16
21rr
MOV AL, F
2201
MOV AL, IC
2202
MOV A, IP
2203
MOV AL, T
2B
MOV T, AL
2C
MOV AL, [BP+i8]
23ii
MOV A, [BP+i8]
29ii
MOV AL, [C]
24
MOV A, [C]
2A
MOV [BP+i8], AL
25ii
MOV [BP+i8], A
2Dii
MOV [C], AL
26
MOV [C], A
2E
MOV g8, n8
8gnn
MOV r16, n16
9rnnnn
===============
Sets p1 to p2

SWP
========
Swaps registers with shadow registers
28

PUSH g8
PUSH r16
=========
Sets [SP] to p1 after subtracting 1 or 2 from SP
Ag
Br

POP g8
POP r16
=========
Sets p1 to [SP] and adds 1 or 2 to SP
Cg
Dr

JP n16
========
Next value of IP becomes p1 (program jumps to p1)
40nnnn

JZ n16
========
Jumps to p1 if zero flag is set
41nnnn

JC n16
=======
Jumps to p1 if carry flag is set
42nnnn

JNZ n16
=======
Jumps to p1 if zero flag is clear
43nnnn

JNC n16
=======
Jumps to p1 if carry flag is clear
44nnnn

CALL n16
CALL [A]
========
Pushes next instruction pointer to stack and jumps to p1
48nnnn
49

INT n8
========
Triggers a software interrupt with code p1
4Ann

RET
========
Pops an address from the stack and jumps to it, discarding the result
4B

IRET
========
Jumps to [A'] and decreases the interrupt handling level
4C

EIH
========
Enable interrupt handling
50

DIH
=======
Disable interrupt handling
51

ECI
======
Enable clock interrupt
52

DCI
======
Disable clock interrupt
53

ESI
======
Enable step interrupt (implementation does not currently support this interrupt)
54

DSI
======
Disable step interrupt (implementation does not currently support this interrupt)
55

IN
======
Wait for input and write it to AL
60

OUT
======
Output AL
61

STOP
======
Stop/reset the CPU
70
